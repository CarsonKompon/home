@attribute [StyleSheet]

@namespace Home

<root>
    <label class="inventory-header">#inventory.inventory</label>
    <div @ref="ContainterContainer" class="inventory-container">
        <div @ref="InventoryContainer" class="container-offset">
            @foreach (StashEntry item in GetInventory())
            {
                @if(item == null || item.Amount == 0) continue;
                <HomeInventoryEntry Entry="@item" />
            }
        </div>
    </div>
</root>

@code
{
    private static HomeInventory Instance;
    public Panel InventoryContainer {get; set;}
    public Panel ContainterContainer {get; set;}
    private float ScrollY = 0;
    private float ScrollVel = 0;

    public HomeInventory()
    {
        Instance = this;
    }

    IList<StashEntry> GetInventory()
    {
        if(Game.LocalPawn is HomePlayer player) return player.Stash;
        return new List<StashEntry>();
    }

    string GetName(StashEntry item)
    {
        HomePlaceable placeable = HomePlaceable.Find(item.Id);
        if(placeable == null) return "N/A";
        return placeable.Name;
    }

    int GetAmount(StashEntry item)
    {
        return item.Amount;
    }

    protected override void OnMouseUp( MousePanelEvent e )
    {
        if(Game.LocalPawn is HomePlayer player)
        {
            player.TryPickup();
        }
    }

    public override void OnMouseWheel(float value)
    {
        if(value != 0)
        {
            ScrollVel = -value * 1000;
            InventoryContainer.Style.Top = Length.Pixels(ScrollY);
            InventoryContainer.Style.Dirty();
        }
    }

    [GameEvent.Client.Frame]
    public void OnFrame()
    {
        if(InventoryContainer == null) return;
        ScrollVel = ScrollVel.LerpTo(0, Time.Delta * 10f);
        if(Math.Abs(ScrollVel) < 0.1f) ScrollVel = 0;
        if(ScrollVel != 0)
        {
            ScrollY += ScrollVel * Time.Delta;
            UpdateScroll();
        }
        if(ScrollY > 0f)
        {
            ScrollVel = -ScrollY * 10f;
            UpdateScroll();
        }
        float height = (InventoryContainer.Box.Rect.Height - ContainterContainer.Box.Rect.Height) * ScaleFromScreen;
        if(ScrollY < -height)
        {
            ScrollVel = -(ScrollY + height) * 10f;
            UpdateScroll();
        }
        //Log.Info(ScrollY);
    }

    public void UpdateScroll()
    {
        InventoryContainer.Style.Top = Length.Pixels(ScrollY);
        InventoryContainer.Style.Dirty();
    }

    [GameEvent.Tick.Client]
    public void OnTick()
    {
        if(Game.LocalPawn is not HomePlayer player) return;
        player.CanPlace = !IsHovering();
    }

    [GameEvent.Client.BuildInput]
    public void OnBuildInput()
    {
        if(Input.Pressed("menu"))
        {
            AddClass("open");
        }
        else if(Input.Released("menu"))
        {
            RemoveClass("open");
        }
    }

    public static bool IsHovering()
    {
        if(Instance == null) return false;
        if(!Instance.Box.RectOuter.IsInside(Mouse.Position)) return false;
        return true;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(GetInventory().Count);
    }
}