@using System;
@using System.Collections.Generic;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;

@namespace Home

<root>
    <label class="inventory-header">#inventory.inventory</label>
    <div class="inventory-container">
        @foreach (StashEntry item in GetInventory())
        {
            @if(item == null || item.Amount == 0) continue;
            <HomeInventoryEntry Entry="@item" />
        }
    </div>
</root>

@code
{
    private static HomeInventory Instance;

    public HomeInventory()
    {
        Instance = this;
    }

    IList<StashEntry> GetInventory()
    {
        if(Game.LocalPawn is HomePlayer player) return player.Stash;
        return new List<StashEntry>();
    }

    string GetName(StashEntry item)
    {
        HomePlaceable placeable = HomePlaceable.Find(item.Id);
        if(placeable == null) return "N/A";
        return placeable.Name;
    }

    int GetAmount(StashEntry item)
    {
        return item.Amount;
    }

    protected override void OnMouseUp( MousePanelEvent e )
    {
        if(Game.LocalPawn is HomePlayer player)
        {
            Log.Info(e.Target);
            player.TryPickup();
        }
    }

    [GameEvent.Tick.Client]
    public void OnTick()
    {
        if(Game.LocalPawn is not HomePlayer player) return;
        player.CanPlace = !IsHovering();
    }

    [GameEvent.Client.BuildInput]
    public void OnBuildInput()
    {
        if(Input.Pressed("menu"))
        {
            AddClass("open");
        }
        else if(Input.Released("menu"))
        {
            RemoveClass("open");
        }
    }

    public static bool IsHovering()
    {
        if(Instance == null) return false;
        if(!Instance.Box.RectOuter.IsInside(Mouse.Position)) return false;
        return true;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(GetInventory().Count);
    }
}