@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using System;
@using System.Linq;
@using System.Threading.Tasks;
@using System.Collections.Generic;

@namespace Home

<root>
    <div class="icon" style="background-image: url( @GetTexture() ); )"></div>
    <label class="inventory-count" text=@GetAmount() />
</root>

@code
{    
    public StashEntry Entry;
    private Vector2 DragOffset;
    private HomeInventoryDragging Dragging = null;
		 

    protected override void OnAfterTreeRender( bool firstTime )
    {
        Tooltip = GetName();
    }

    private string GetModel()
    {
        HomePlaceable placeable = Entry.GetPlaceable();
        if(placeable == null) return "";
        return placeable.Model;
    }

    private string GetName()
    {
        HomePlaceable placeable = Entry.GetPlaceable();
        if(placeable == null) return "N/A";
        return placeable.Name;
    }

    private string GetAmount()
    {
        return (Entry.Amount - Entry.Used).ToString() + "/" + Entry.Amount.ToString();
    }

    private string GetTexture()
    {
        HomePlaceable placeable = Entry.GetPlaceable();
        return placeable.GetThumbnail();
    }

    protected override void OnMouseDown(MousePanelEvent e)
    {
        base.OnMouseDown(e);
        if(!HasClass("dragging"))
        {
            AddClass("dragging");
            Dragging = Game.RootPanel.AddChild<HomeInventoryDragging>();
            Dragging.Placeable = Entry.GetPlaceable();
            Dragging.DragOffset = MousePosition;

            if(Game.LocalPawn is HomePlayer player)
            {
                player.SetPlacing(Dragging.Placeable);
            }
        }
    }

    protected override void OnMouseUp( MousePanelEvent e )
    {
        base.OnMouseUp( e );
        if(HasClass("dragging"))
        {
            RemoveClass("dragging");
        }
        if(Dragging != null)
        {
            Dragging.Delete();
            Dragging = null;
            
            if(Game.LocalPawn is HomePlayer player)
            {
                player.TryPlace();
            }
        }
    }

		

    protected override int BuildHash()
    {
        return HashCode.Combine(GetAmount());
    }
}