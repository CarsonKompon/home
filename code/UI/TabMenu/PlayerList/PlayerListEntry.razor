@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using System;
@using System.Collections.Generic;
@using System.Linq;

@namespace Home

<root class="@GetStyle()">
    @if(!Client.IsValid())
    {
        return;
    }

    <div class="player-container">
        <image class="avatar" texture=@AvatarTexture() />

        <div class="name-container">
            <div class="name">
                <label text=@Client.Name />
                @if(Player.Data != null)
                {
                    <div class="badges">
                        @foreach(var badge in Player.Data.GetBadges())
                        {
                            <img class="badge" src=@badge.Icon Tooltip=@badge.Name />
                        }
                    </div>
                }
            </div>
            <label class="location" text=@(Player?.Location ?? "Loading...") />
        </div>
    </div>

    <div class="buttons">
        @if(!IsMe())
        {
            <i onclick=@ToggleMute >@GetMuteIcon()</i>
        }
    </div>

    <div class="ping-container">
        <label class="ping" text=@Client.Ping />
        <label>ms</label>
    </div>
</root>

@code
{
    public IClient Client { get; set; }

    HomePlayer Player
    {
        get
        {
            if(!Client.IsValid() || !Client.Pawn.IsValid()) return null;
            return Client.Pawn as HomePlayer;
        }
    }

    string GetStyle()
    {
        if(Client.Pawn is not HomePlayer player) return "";
        return player.GetDisplayStyle();
    }

    bool IsMe()
    {
        return Client.SteamId == Game.LocalClient.SteamId;
    }

    string AvatarTexture()
    {
        return $"avatar:{Client.SteamId}";
    }

    void ToggleMute()
    {
        if(Game.LocalPawn is not HomePlayer player) return;
        player.TogglePlayerMute(Client.SteamId);
    }

    string GetMuteIcon()
    {
        if(Game.LocalPawn is not HomePlayer localPlayer) return "";
        if(localPlayer.PlayerVolumes.ContainsKey(Client.SteamId))
        {
            if(localPlayer.PlayerVolumes[Client.SteamId] == 0)
            {
                return "volume_off";
            }
        }
        return "volume_up";
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Client.Name, Player?.Location ?? null, Client.Ping, GetMuteIcon());
    }
}