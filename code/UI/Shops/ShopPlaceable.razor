@using System;
@using System.Collections.Generic;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@attribute [StyleSheet]

@namespace Home

<root class="shop-placeable">
    <label class="name" text=@Name />
    <div class="shop-container">
        @if(Target == null)
        {
            <div class="preview" />
        }
        else
        {
            <RotatingModelScenePanel IdleSpeed=@(20) Model=@Target.GetModel() class="preview" />
        }
        <div class="shop">
            <div class="items">
                @foreach(var item in PlaceableList)
                {
                    <ShopPlaceableButton Placeable=@item />
                }
            </div>
        </div>
    </div>
    <img src="/ui/ui_no.png" class="close" onclick="@Close" />
</root>

@code
{
    public static ShopPlaceable Current { get; set; }

    public HomePlaceable Target { get; set; } = null;
    public string Name = "Shop";
    public string Music = "go_to_the_picnic";

    private Sound PlayingMusic;
    private float MusicVolume = 0f;

    public List<HomePlaceable> PlaceableList = new();

    [ClientRpc]
    public static void Open(string tag, string name, string music = "go_to_the_picnic")
    {
        if(Current == null)
        {
            Current = Game.RootPanel.AddChild<ShopPlaceable>();
        }
        if(Current.HasClass("open"))
        {
            Current.Close();
            return;
        }
        Current.Name = name;
        Current.Music = music;
        Current.PlaceableList.Clear();
        Current.PlaceableList = HomePlaceable.All.Where(x => x.Categories.Contains(tag) && x.State == PlaceableState.Visible).ToList();
        Current.SetTarget(null);
        Current.AddClass("open");
        if(Current.PlayingMusic.IsPlaying) Current.PlayingMusic.Stop();
        Current.PlayingMusic = Sound.FromScreen(Current.Music).SetVolume(0f);
        Current.MusicVolume = 0f;
    }

    public void Close()
    {
        RemoveClass("open");
    }

    [GameEvent.Tick.Client]
    public void OnTick()
    {
        if(!PlayingMusic.IsPlaying) return;
        bool isOpen = HasClass("open");
        float lerpTo = isOpen ? 0.5f : 0f;
        MusicVolume = MathX.Lerp(MusicVolume, lerpTo, Time.Delta * 5);
        PlayingMusic.SetVolume(MusicVolume);
        if(!isOpen && MusicVolume < 0.01f)
        {
            PlayingMusic.Stop();
        }
    }

    [GameEvent.Client.BuildInput]
    public void BuildInput()
    {
        if(Input.Pressed("crouch"))
        {
            Close();
        }
    }

    public void SetTarget(HomePlaceable placeable)
    {
        Target = placeable;
    }

}