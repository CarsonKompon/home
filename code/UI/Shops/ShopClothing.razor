@using System;
@using System.Collections.Generic;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@attribute [StyleSheet]

@namespace Home

<root class="shop-clothing">
    <label class="name" text=@Name />
    <div class="shop-container">
        @if(Target == null)
        {
            <div class="preview" />
        }
        else if(!string.IsNullOrEmpty(Target.CloudModel))
        {
            <div @ref="VideoPreview" class="preview video" />
        }
        else
        {
            <RotatingModelScenePanel IdleSpeed=@(-40) Model=@Target.Model class="preview" />
        }
        <div class="shop">
            <div class="sorting">
                <label>Sort by: </label>
                <button class="@IsSortingCategories" onclick=@SortByCategories >Categories</button>
                <button class="@IsSortingName" onclick=@SortByName >Name</button>
                <button class="@IsSortingCost" onclick=@SortByCost >Cost</button>
                <button class="@IsSortingOwned" onclick=@SortByOwned >Owned</button>
            </div>
            <div class="items">
                @if(SortType == ShopSortType.Categories)
                {
                    <h2>Skins</h2>
                    @foreach(var item in SkinList)
                    {
                        <ShopClothingButton Clothes=@item />
                    }
                    <h2>Hats</h2>
                    @foreach(var item in HatList)
                    {
                        <ShopClothingButton Clothes=@item />
                    }
                    <h2>Hair</h2>
                    @foreach(var item in HairList)
                    {
                        <ShopClothingButton Clothes=@item />
                    }
                    @if(FacialList.Count > 0)
                    {
                        <h2>Facial</h2>
                        @foreach(var item in FacialList)
                        {
                            <ShopClothingButton Clothes=@item />
                        }
                    }
                    <h2>Tops</h2>
                    @foreach(var item in TopsList)
                    {
                        <ShopClothingButton Clothes=@item />
                    }
                    <h2>Bottoms</h2>
                    @foreach(var item in BottomsList)
                    {
                        <ShopClothingButton Clothes=@item />
                    }
                    <h2>Footwear</h2>
                    @foreach(var item in FootwearList)
                    {
                        <ShopClothingButton Clothes=@item />
                    }
                }
                else
                {
                    @foreach(var item in ClothingList)
                    {
                        <ShopClothingButton Clothes=@item />
                    }
                }
            </div>
        </div>
    </div>
    <img src="/ui/ui_no.png" class="close" onclick="@Close" />
</root>

@code
{
    public static ShopClothing Current { get; set; }
    public Panel VideoPreview { get; set; }

    public HomeClothing Target { get; set; } = null;
    public string Name = "Shop";
    public string Music = "tupac_lives";

    private Sound PlayingMusic;
    private float MusicVolume = 0f;

    public List<HomeClothing> ClothingList = new();

    [ClientRpc]
    public static void Open(string name, string music = "tupac_lives")
    {
        if(Current == null)
        {
            Current = Game.RootPanel.AddChild<ShopClothing>();
        }
        if(Current.HasClass("open"))
        {
            Current.Close();
            return;
        }
        Current.Name = name;
        Current.Music = music;
        Current.ClothingList.Clear();
        Current.ClothingList.AddRange(HomeClothing.AllHome.Where(x => x.Cost > 0));
        Current.GetClothing();
        Current.AddClass("open");
        if(Current.PlayingMusic.IsPlaying) Current.PlayingMusic.Stop();
        Current.PlayingMusic = Sound.FromScreen(Current.Music).SetVolume(0f);
        Current.MusicVolume = 0f;
    }

    public void Close()
    {
        RemoveClass("open");
    }

    [GameEvent.Tick.Client]
    public void OnTick()
    {
        if(!PlayingMusic.IsPlaying) return;
        bool isOpen = HasClass("open");
        float lerpTo = isOpen ? 0.5f : 0f;
        MusicVolume = MathX.Lerp(MusicVolume, lerpTo, Time.Delta * 5);
        PlayingMusic.SetVolume(MusicVolume);
        if(!isOpen && MusicVolume < 0.01f)
        {
            PlayingMusic.Stop();
        }
    }

    [GameEvent.Client.BuildInput]
    public void BuildInput()
    {
        if(Input.Pressed("crouch"))
        {
            Close();
        }
    }

    public async void SetTarget(HomeClothing clothing)
    {
        Target = clothing;

        VideoPreview.Style.SetBackgroundImage(await clothing.GetVideoThumbnail());
    }

    enum ShopSortType { Categories, Name, Cost, Owned }
    private ShopSortType SortType = ShopSortType.Categories;
    private string IsSortingCategories => SortType == ShopSortType.Categories ? "selected" : "";
    private string IsSortingName => SortType == ShopSortType.Name ? "selected" : "";
    private string IsSortingCost => SortType == ShopSortType.Cost ? "selected" : "";
    private string IsSortingOwned => SortType == ShopSortType.Owned ? "selected" : "";

    bool Descending = false;

    private void SortByCategories()
    {
        if(SortType == ShopSortType.Categories) Descending = !Descending;
        SortType = ShopSortType.Categories;
        GetClothing();
    }

    private void SortByName()
    {
        if(SortType == ShopSortType.Name) Descending = !Descending;
        SortType = ShopSortType.Name;
        GetClothing();
    }

    private void SortByCost()
    {
        if(SortType == ShopSortType.Cost) Descending = !Descending;
        SortType = ShopSortType.Cost;
        GetClothing();
    }

    private void SortByOwned()
    {
        if(SortType == ShopSortType.Owned) Descending = !Descending;
        SortType = ShopSortType.Owned;
        GetClothing();
    }

    private List<HomeClothing> HatList = new();
    private List<HomeClothing> HairList = new();
    private List<HomeClothing> SkinList = new();
    private List<HomeClothing> FootwearList = new();
    private List<HomeClothing> BottomsList = new();
    private List<HomeClothing> TopsList = new();
    private List<HomeClothing> GlovesList = new();
    private List<HomeClothing> FacialList = new();
    private void GetClothing()
    {
        switch(SortType)
        {
            case ShopSortType.Categories:
                ClothingList = ClothingList.OrderBy(x => x.ResourceName).ToList();
                HatList = ClothingList.Where(x => x.Category == Clothing.ClothingCategory.Hat).ToList();
                HairList = ClothingList.Where(x => x.Category == Clothing.ClothingCategory.Hair).ToList();
                SkinList = ClothingList.Where(x => x.Category == Clothing.ClothingCategory.Skin).ToList();
                FootwearList = ClothingList.Where(x => x.Category == Clothing.ClothingCategory.Footwear).ToList();
                BottomsList = ClothingList.Where(x => x.Category == Clothing.ClothingCategory.Bottoms).ToList();
                TopsList = ClothingList.Where(x => x.Category == Clothing.ClothingCategory.Tops).ToList();
                GlovesList = ClothingList.Where(x => x.Category == Clothing.ClothingCategory.Gloves).ToList();
                FacialList = ClothingList.Where(x => x.Category == Clothing.ClothingCategory.Facial).ToList();
                break;
            case ShopSortType.Name:
                ClothingList = ClothingList.OrderBy(x => x.Title).ToList();
                break;
            case ShopSortType.Cost:
                ClothingList = ClothingList.OrderBy(x => x.Cost).ToList();
                break;
            case ShopSortType.Owned:
                if(Game.LocalPawn is not HomePlayer player) return;
                ClothingList = ClothingList.OrderBy(x => player.Data.Clothing.Contains(x.ResourceId) ).ToList();
                break;
        }
        if(Descending) ClothingList.Reverse();
    }

}