@using System;
@using System.Collections.Generic;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;

@namespace Home

<root onclick="@OnClick">
    <label @ref="TextLabel" class="name" text=@Layout />
    <div class="layout-extras">
        @if(Deleting)
        {
            <img class="layout-delete delete-yes" src="ui/ui_yes.png" onclick="@DeleteLayout" />
            <img class="layout-delete delete-no" src="ui/ui_no.png" onclick="@StopDeleting" />
        }
        else
        {
            <img class="layout-delete" src="ui/ui_delete.png" onclick="@StartDeleting" />   
        }
    </div>
</root>

@code
{
    public static List<RoomLayoutButton> All = new List<RoomLayoutButton>();

    public string Layout { get; set; }
    public Label TextLabel { get; set;}
    public bool Deleting { get; set; } = false;

    public RoomLayoutButton()
    {
        All.Add(this);
    }

    ~RoomLayoutButton()
    {
        if(All.Contains(this)) All.Remove(this);
    }

    protected override void OnMouseOut( MousePanelEvent e )
    {
        base.OnMouseOut( e );
        
        // Check if mouse is in bounds
        if ( PseudoClass.HasFlag( PseudoClass.Hover ) ) return;

        Deleting = false;
    }		

    public void OnClick(PanelEvent e)
    {
        foreach (var button in All)
        {
            button.RemoveClass("selected");
        }
        AddClass("selected");
    }

    public void DeleteLayout(PanelEvent e)
    {
        if(Game.LocalPawn is not HomePlayer player) return;
        HomeGame.DeleteLayout(Layout);

        All.Remove(this);
        Delete();
    }

    public void StartDeleting(PanelEvent e)
    {
        Deleting = true;
    }

    public void StopDeleting(PanelEvent e)
    {
        Deleting = false;
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Layout);
    }
}