@using System;
@using System.Collections.Generic;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;

@namespace Home

<root>
    <div class="layout-header">
        <div class="spacer" />
        @if(Editing)
        {
            <TextEntry class="layout-entry" CharacterRegex="^[^?/\\|*]$" Value:bind=@RoomName />
            <img src="ui/ui_save.png" onclick="@OnNameSave" />
        }
        else
        {
            <label class="layout-name" text=@GetRoomName() />
            <img src="ui/ui_edit.png" onclick="@OnNameEdit" />
        }
    </div>

    <div class="layout-list">
        @if(Game.LocalPawn is HomePlayer player && player.Room != null)
        {
            foreach (RoomLayout layout in player.RoomLayouts)
            {
                <RoomLayoutButton Layout="@layout.Name" />
            }
        }
    </div>

    <div class="layout-buttons">
        <button class="button" onclick="@LoadLayout">#layout.load</button>
        <button class="button" onclick="@SaveLayout">#layout.save</button>
    </div>
</root>

@code
{
    protected override bool WantsDragScrolling { get { return false; } }
    
    public bool Editing = false;
    public string RoomName = "N/A";

    private RealTimeSince LastLoad = 0;

    public void OnNameEdit()
    {
        Editing = true;
        RoomName = GetRoomName();
    }
    
    public void OnNameSave()
    {
        Editing = false;
        if(Game.LocalPawn is not HomePlayer player) return;
        if(player.Room == null) return;
        player.LastRoomName = RoomName;
        Cookie.SetString("home.last_room_name", RoomName);
        ConsoleSystem.Run("home_rename_room", RoomName);
    }

    public void LoadLayout()
    {
        if(Game.LocalPawn is not HomePlayer player) return;
        if(LastLoad < 1f) return;
        string layout = "";
        foreach(RoomLayoutButton button in RoomLayoutButton.All)
        {
            if(button.HasClass("selected"))
            {
                layout = button.TextLabel.Text;
                break;
            }
        }
        if(layout == "") return;
        player.LastRoomName = layout;
        Cookie.SetString("home.last_room_name", layout);
        player.LoadLayoutClientRpc(To.Single(player), layout);
    }

    public void SaveLayout()
    {
        if(Game.LocalPawn is not HomePlayer player) return;
        player.SaveLayout(GetRoomName());
    }

    public string GetRoomName()
    {
        if(Game.LocalPawn is not HomePlayer player) return "N/A";
        if(player.Room == null) return "Unnamed Room";
        return player.Room.Name;
    }

    public int GetLayoutCount()
    {
        if(Game.LocalPawn is not HomePlayer player) return 0;
        return player.RoomLayouts.Count;
    }

    [GameEvent.Client.BuildInput]
    public void OnBuildInput()
    {
        if(Input.Pressed("menu"))
        {
            AddClass("open");
        }
        else if(Input.Released("menu"))
        {
            RemoveClass("open");
        }
    }

    [GameEvent.Tick.Client]
    public void OnTick()
    {
        if(Game.LocalPawn is not HomePlayer player) return;
        SetClass("can-show", player.Room != null);

        if(Editing) SetClass("open", true);
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(GetRoomName(), GetLayoutCount(), Editing, RoomName );
    }
}