@using System;
@using System.Collections.Generic;
@using System.Linq;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;

@namespace Home

<root>
    <div class="layout-header">
        <div class="spacer" />
        <label text=@GetRoomName() />
        <img src="ui/GUI/ui_edit.png" />
    </div>

    <PanelNoDragScroll class="layout-list">
        @if(Game.LocalPawn is HomePlayer player && player.Room != null)
        {
            foreach (RoomLayout layout in player.RoomLayouts)
            {
                <RoomLayoutButton Layout="@layout.Name" />
            }
        }
    </PanelNoDragScroll>

    <div class="layout-buttons">
        <button class="button" onclick="@LoadLayout">#layout.load</button>
        <button class="button" onclick="@SaveLayout">#layout.save</button>
    </div>
</root>

@code
{
    protected override bool WantsDragScrolling { get { return false; } }
    
    public void LoadLayout()
    {
        Log.Info("üè†: Loading layout...");
        string layout = "";
        foreach(RoomLayoutButton button in RoomLayoutButton.All)
        {
            if(button.HasClass("selected"))
            {
                layout = button.TextLabel.Text;
                break;
            }
        }
        if(layout == "") return;
        HomeGame.LoadLayout(layout);
    }

    public void SaveLayout()
    {
        Log.Info("üè†: Saving layout...");
        HomeGame.SaveLayout(GetRoomName());
    }

    public string GetRoomName()
    {
        if(Game.LocalPawn is not HomePlayer player) return "N/A";
        if(player.Room == null) return "Unnamed Room";
        return player.Room.Name;
    }

    public int GetLayoutCount()
    {
        if(Game.LocalPawn is not HomePlayer player) return 0;
        return player.RoomLayouts.Count;
    }

    [GameEvent.Client.BuildInput]
    public void OnBuildInput()
    {
        if(Input.Pressed("menu"))
        {
            AddClass("open");
        }
        else if(Input.Released("menu"))
        {
            RemoveClass("open");
        }
    }

    [GameEvent.Tick.Client]
    public void OnTick()
    {
        if(Game.LocalPawn is not HomePlayer player) return;
        SetClass("can-show", player.Room != null);
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(GetRoomName(), GetLayoutCount());
    }
}