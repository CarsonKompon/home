@attribute [StyleSheet]

@namespace Home

<root>
    <div class="option switch">
        <div class="name">Physics Enabled</div>
        <switchcontrol Value="@HasPhysics()" @ref="SwitchPhysics" ></switchcontrol>
    </div>
    <ColorEditor class="option color" @ref="ColorPicker" />
</root>

@code
{
    public Entity Entity { get; set; }
    public SwitchControl SwitchPhysics { get; set; }
    public ColorEditor ColorPicker { get; set; }
    private RealTimeSince LastColorUpdate = 0;

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);
        
        if(firstTime)
        {
            if(Entity is ModelEntity modelEnt)
            {
                ColorPicker.Value = modelEnt.RenderColor;
            }
        }

        SwitchPhysics.OnValueChanged += (value) => {
            OnPhysicsEnabledChanged(value);
        };

        ColorPicker.OnColorChanged += (color) => {
            if(Entity.Components.Get<PlaceableComponent>() is PlaceableComponent component)
            {
                PlaceableComponent.SetColor(Entity.NetworkIdent, color.r, color.g, color.b);
            }
        };
    }

    public bool HasPhysics()
    {
        if(Entity.Components.Get<PlaceableComponent>() is not PlaceableComponent component) return false;
        return component.HasPhysics;
    }

    public void SetEntity(Entity entity)
    {
        Entity = entity;
    }

    public override void Tick()
    {
        if(LastColorUpdate > 0.5f)
        {
            UpdateColor();
            LastColorUpdate = 0;
        }
    }

    [GameEvent.Client.BuildInput]
    public void OnBuildInput()
    {
        if(Input.Released("click"))
        {
            if(!PseudoClass.HasFlag(PseudoClass.Hover))
            {
                Close();
            }  
        }
        else if(Input.Released("menu"))
        {
            Close();
        }
    }

    public void OnPhysicsEnabledChanged(bool enabled)
    {
        ConsoleSystem.Run("home_set_placeable_physics", Entity.NetworkIdent, enabled);
        
    }

    private void UpdateColor()
    {
        if(Entity.Components.Get<PlaceableComponent>() is PlaceableComponent component)
        {
            var color = ColorPicker.Value.ToColor();
            PlaceableComponent.SetColor(Entity.NetworkIdent, color.r, color.g, color.b);
        }
    }

    private void Close()
    {
        Delete();
    }

    @* protected override int BuildHash()
    {
        return HashCode.Combine(HasPhysics());
    } *@
}