@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using System;
@using System.Collections.Generic;

@namespace Home

<root>
    <div class="option-switch">
        <div class="name">Physics Enabled</div>
        <switchcontrol Value="@HasPhysics()" @ref="SwitchPhysics" ></switchcontrol>
    </div>
</root>

@code
{
    public Entity Entity { get; set; }
    public SwitchControl SwitchPhysics { get; set; }

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);
        SwitchPhysics.OnValueChanged += (value) => {
            OnPhysicsEnabledChanged(value);
        };
    }

    public bool HasPhysics()
    {
        if(Entity.Components.Get<PlaceableComponent>() is not PlaceableComponent component) return false;
        return component.HasPhysics;
    }

    public void SetEntity(Entity entity)
    {
        Entity = entity;
    }

    [GameEvent.Client.BuildInput]
    public void OnBuildInput()
    {
        if(Input.Released("click"))
        {
            if(!PseudoClass.HasFlag(PseudoClass.Hover))
            {
                Delete();
            }  
        }
        else if(Input.Released("menu"))
        {
            Delete();
        }
    }

    public void OnPhysicsEnabledChanged(bool enabled)
    {
        Log.Info("fr?");
        ConsoleSystem.Run("home_set_placeable_physics", Entity.NetworkIdent, enabled);
        
    }

    @* protected override int BuildHash()
    {
        return HashCode.Combine(HasPhysics());
    } *@
}