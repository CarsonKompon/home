@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using Sandbox;
@using Sandbox.UI;
@using Sandbox.UI.Construct;
@using Editor;

@inherits WorldPanel
@attribute [StyleSheet]
@namespace Home

<root>
    <h2>@Title</h2>
    <div class="content">
        @foreach(var leaderboard in Boards)
        {
            <div class="leaderboard">
                <h3>@leaderboard.Title</h3>
                <div class="entries">
                    @foreach(var entry in leaderboard.Entries)
                    {
                        <div class="entry @IsMe(entry)">
                            <div class="rank">@entry.Rank</div>
                            @* <div class="flag">@GetFlagEmoji(entry.CountryCode)</div> *@
                            <div class="name">
                                <image texture=@AvatarTexture(entry) />
                                <label>@entry.DisplayName</label>
                            </div>
                            <div class="score">@entry.Value</div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</root>

@code
{
    public string Title { get; set; } = "Home";

    List<Sandbox.Services.Leaderboards.Board> Boards {get; set;} = new();

    RealTimeSince _lastUpdate = 0f;

    public LeaderboardPanel()
    {
        var width = 1500f;
        var height = 2200f;
        PanelBounds = new Rect( -width/2, -height/2, width, height );
    }

    public void Init(string title, string[] leaderboardIds)
    {
        Title = title;
        foreach(var id in leaderboardIds)
        {
            Boards.Add( Sandbox.Services.Leaderboards.Get(id) );
        }
        UpdateScores();
    }

    string IsMe(Sandbox.Services.Leaderboards.Entry entry)
    {
        return entry.Me ? "me" : "";
    }

    string AvatarTexture(Sandbox.Services.Leaderboards.Entry entry)
    {
        return $"avatar:{entry.SteamId}";
    }

    private async void UpdateScores()
    {
        foreach(var board in Boards)
        {
            await board.Refresh();
        }
        StateHasChanged();
    }

    public string GetFlagEmoji(string countrycode)
    {
        if (string.IsNullOrEmpty(countrycode))
            return "";

        string code = countrycode.Replace("(", "").Replace(")", "");

        var codePoints = code.ToUpper().ToCharArray().Select(c => 127397 + c);
        return string.Join("", codePoints.Select(c => char.ConvertFromUtf32(c)));

    }
    
    public override void Tick()
    {
        if(_lastUpdate > 2f * 60f)
        {
            UpdateScores();
            _lastUpdate = 0f;
        }
    }
}